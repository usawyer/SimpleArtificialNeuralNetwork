#include <iostream>

#include "mlp.h"

using namespace s21;

int main() {
  Topology topology{784, 128, 256, 128, 26};

  MLP mlp{topology};

  mlp.SetType(Config::ModelType::kGraph);

  std::cout << "\nStart read train dataset...\n";
  mlp.SetTrainDataset("../datasets/emnist-letters-train.csv");
  std::cout << "\nStart read test dataset...\n";
  mlp.SetTestDataset("../datasets/emnist-letters-test.csv");
  std::cout << "\nStart load weights...\n";
  mlp.Load("./weights/mlp_5layers_0.183609mse_0.796662acc_0.01lr.bin");
  mlp.SetVerbose(true);
  mlp.SetEpochs(1);
  mlp.SetKFolds(10);
  mlp.SetLearningRate(0.01);
  // mlp.SetTestSample(0.2);
  // mlp.SetTrainType(Config::TrainType::kCrossValidation);
  std::cout << "\nStart training on " << mlp.GetEpochs() << " epochs...\n";
  mlp.Train();
  std::cout << "Start testing on " << mlp.GetTestSample() * 100
            << "% of test dataset...\n";
  mlp.Test();
  mlp.Save();
  Image image = Image(
      {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,
       8,   32,  37,  37,  37,  37,  37,  20,  7,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   22,
       46,  114, 127, 127, 127, 127, 125, 77,  32,  0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   22,  46,  115, 172,
       208, 245, 250, 250, 250, 250, 249, 206, 126, 8,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   3,   36,  159, 207, 245, 252,
       254, 254, 254, 255, 255, 254, 254, 245, 204, 34,  0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   7,   22,  95,  218, 244, 254, 254,
       254, 254, 255, 255, 255, 255, 254, 250, 220, 50,  0,   0,   0,   0,
       0,   0,   0,   0,   0,   1,   8,   90,  159, 232, 253, 254, 254, 251,
       250, 250, 250, 250, 250, 254, 254, 254, 245, 114, 4,   0,   0,   0,
       0,   0,   0,   0,   0,   20,  77,  218, 245, 254, 254, 254, 234, 145,
       129, 127, 127, 127, 141, 222, 247, 254, 250, 129, 5,   0,   0,   0,
       0,   0,   0,   0,   0,   34,  115, 243, 253, 254, 252, 250, 207, 64,
       41,  38,  41,  40,  53,  176, 232, 254, 250, 141, 11,  1,   0,   0,
       0,   0,   0,   0,   3,   84,  172, 252, 254, 251, 189, 144, 77,  11,
       14,  38,  99,  76,  12,  84,  172, 252, 254, 220, 77,  20,  0,   0,
       0,   0,   0,   0,   21,  170, 232, 254, 254, 220, 84,  40,  30,  19,
       52,  170, 236, 213, 66,  36,  115, 245, 254, 249, 125, 37,  0,   0,
       0,   0,   0,   0,   34,  204, 245, 254, 252, 177, 47,  52,  75,  22,
       47,  207, 250, 231, 82,  23,  82,  233, 252, 250, 127, 37,  0,   0,
       0,   0,   0,   2,   82,  233, 252, 254, 251, 143, 18,  19,  27,  26,
       83,  233, 254, 246, 115, 8,   34,  204, 245, 250, 127, 37,  0,   0,
       0,   0,   0,   4,   125, 249, 254, 254, 254, 221, 107, 51,  2,   37,
       125, 249, 254, 250, 129, 10,  14,  143, 222, 249, 125, 37,  0,   0,
       0,   0,   0,   5,   129, 250, 254, 254, 254, 233, 92,  32,  0,   37,
       127, 250, 254, 252, 191, 129, 129, 191, 236, 233, 82,  21,  0,   0,
       0,   0,   0,   9,   140, 250, 254, 255, 254, 222, 52,  11,  0,   39,
       129, 250, 254, 254, 236, 218, 218, 236, 249, 220, 50,  9,   0,   0,
       0,   0,   4,   32,  203, 254, 254, 255, 254, 217, 42,  13,  32,  101,
       177, 252, 254, 254, 254, 254, 254, 254, 251, 170, 21,  2,   0,   0,
       0,   0,   4,   32,  203, 254, 254, 254, 254, 229, 129, 117, 140, 212,
       240, 254, 255, 254, 254, 254, 254, 248, 222, 79,  3,   0,   0,   0,
       0,   0,   2,   21,  174, 252, 254, 254, 253, 217, 151, 148, 101, 174,
       222, 254, 254, 254, 254, 250, 250, 236, 188, 38,  0,   0,   0,   0,
       0,   0,   2,   21,  172, 252, 254, 247, 221, 92,  26,  27,  8,   53,
       141, 250, 254, 254, 222, 141, 130, 152, 128, 16,  0,   0,   0,   0,
       0,   0,   2,   20,  170, 252, 253, 207, 127, 10,  0,   0,   0,   37,
       125, 249, 254, 250, 139, 13,  6,   16,  15,  1,   0,   0,   0,   0,
       0,   0,   0,   9,   140, 250, 247, 159, 79,  3,   0,   0,   0,   32,
       113, 243, 253, 243, 115, 4,   0,   1,   1,   0,   0,   0,   0,   0,
       0,   0,   0,   4,   125, 237, 206, 47,  10,  0,   0,   0,   0,   7,
       33,  158, 200, 158, 33,  0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   2,   63,  111, 76,  7,   0,   0,   0,   0,   0,   0,
       1,   20,  32,  20,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   18,  32,  20,  1,   0,   0,   0,   0,   0,   0,
       0,   2,   3,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
      {7});
  char expected = image.GetLetter();
  char predicted = mlp.Predict(image);
  PrintVector(mlp.Predict(image.GetPixels()));
  std::cout << "Predicted Label: " << mlp.PredictLabel(image) << "\n";
  std::cout << "Expected: " << expected << " Predicted: " << predicted << "\n";

  image.Transform();
  // image.InverseTransform();
  image.PrintImage();
  std::cout << "Expected: " << image.GetLetter() << "\n";
  return 0;
}