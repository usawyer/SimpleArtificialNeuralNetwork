#include <gtest/gtest.h>

#include <cmath>

#include "matrix_operations.h"

using namespace s21;

constexpr double kEps = 1e-6;

bool IsEqualMatrices(const Matrix& m1, const Matrix& m2) {
  if (m1.empty() or m2.empty() or m1.size() != m2.size() or
      m1[0].size() != m2[0].size()) {
    return false;
  }
  for (std::size_t i{0u}; i < m1.size(); ++i) {
    for (std::size_t j{0u}; j < m1[0].size(); ++j) {
      if (std::fabs(m1[i][j] - m2[i][j]) >= kEps) {
        return false;
      }
    }
  }

  return true;
}

TEST(MatrixOperations, RandomizeMatrix) {
  Matrix m = Matrix(1000, Vector(1000));
  EXPECT_NO_THROW(RandomizeMatrix(m));
}

TEST(MatrixOperations, Addition) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{9, 8, 7, 6, 5, 4, 3, 2, 1}, {8, 7, 6, 5, 4, 3, 2, 1, 9},
               {7, 6, 5, 4, 3, 2, 1, 9, 8}, {6, 5, 4, 3, 2, 1, 9, 8, 7},
               {5, 4, 3, 2, 1, 9, 8, 7, 6}, {4, 3, 2, 1, 9, 8, 7, 6, 5},
               {3, 2, 1, 9, 8, 7, 6, 5, 4}, {2, 1, 9, 8, 7, 6, 5, 4, 3}};
  Matrix m3 = {{10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10}};
  Matrix m = Addition(m1, m2);
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, OperatorAdd) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{9, 8, 7, 6, 5, 4, 3, 2, 1}, {8, 7, 6, 5, 4, 3, 2, 1, 9},
               {7, 6, 5, 4, 3, 2, 1, 9, 8}, {6, 5, 4, 3, 2, 1, 9, 8, 7},
               {5, 4, 3, 2, 1, 9, 8, 7, 6}, {4, 3, 2, 1, 9, 8, 7, 6, 5},
               {3, 2, 1, 9, 8, 7, 6, 5, 4}, {2, 1, 9, 8, 7, 6, 5, 4, 3}};
  Matrix m3 = {{10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10},
               {10, 10, 10, 10, 10, 10, 10, 10, 10}};
  Matrix m = m1 + m2;
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, Subtraction) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{9, 8, 7, 6, 5, 4, 3, 2, 1}, {8, 7, 6, 5, 4, 3, 2, 1, 9},
               {7, 6, 5, 4, 3, 2, 1, 9, 8}, {6, 5, 4, 3, 2, 1, 9, 8, 7},
               {5, 4, 3, 2, 1, 9, 8, 7, 6}, {4, 3, 2, 1, 9, 8, 7, 6, 5},
               {3, 2, 1, 9, 8, 7, 6, 5, 4}, {2, 1, 9, 8, 7, 6, 5, 4, 3}};
  Matrix m3 = {
      {-8, -6, -4, -2, 0, 2, 4, 6, 8}, {-6, -4, -2, 0, 2, 4, 6, 8, -8},
      {-4, -2, 0, 2, 4, 6, 8, -8, -6}, {-2, 0, 2, 4, 6, 8, -8, -6, -4},
      {0, 2, 4, 6, 8, -8, -6, -4, -2}, {2, 4, 6, 8, -8, -6, -4, -2, 0},
      {4, 6, 8, -8, -6, -4, -2, 0, 2}, {6, 8, -8, -6, -4, -2, 0, 2, 4}};
  Matrix m = Subtraction(m1, m2);
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, OperatorSub) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{9, 8, 7, 6, 5, 4, 3, 2, 1}, {8, 7, 6, 5, 4, 3, 2, 1, 9},
               {7, 6, 5, 4, 3, 2, 1, 9, 8}, {6, 5, 4, 3, 2, 1, 9, 8, 7},
               {5, 4, 3, 2, 1, 9, 8, 7, 6}, {4, 3, 2, 1, 9, 8, 7, 6, 5},
               {3, 2, 1, 9, 8, 7, 6, 5, 4}, {2, 1, 9, 8, 7, 6, 5, 4, 3}};
  Matrix m3 = {
      {-8, -6, -4, -2, 0, 2, 4, 6, 8}, {-6, -4, -2, 0, 2, 4, 6, 8, -8},
      {-4, -2, 0, 2, 4, 6, 8, -8, -6}, {-2, 0, 2, 4, 6, 8, -8, -6, -4},
      {0, 2, 4, 6, 8, -8, -6, -4, -2}, {2, 4, 6, 8, -8, -6, -4, -2, 0},
      {4, 6, 8, -8, -6, -4, -2, 0, 2}, {6, 8, -8, -6, -4, -2, 0, 2, 4}};
  Matrix m = m1 - m2;
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, Transpose) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{1, 2, 3, 4, 5, 6, 7, 8}, {2, 3, 4, 5, 6, 7, 8, 9},
               {3, 4, 5, 6, 7, 8, 9, 1}, {4, 5, 6, 7, 8, 9, 1, 2},
               {5, 6, 7, 8, 9, 1, 2, 3}, {6, 7, 8, 9, 1, 2, 3, 4},
               {7, 8, 9, 1, 2, 3, 4, 5}, {8, 9, 1, 2, 3, 4, 5, 6},
               {9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m = Transpose(m1);
  EXPECT_TRUE(IsEqualMatrices(m, m2));
}

TEST(MatrixOperations, MultiplyNumber) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  double d = 5;
  Matrix m2 = {
      {5, 10, 15, 20, 25, 30, 35, 40, 45}, {10, 15, 20, 25, 30, 35, 40, 45, 5},
      {15, 20, 25, 30, 35, 40, 45, 5, 10}, {20, 25, 30, 35, 40, 45, 5, 10, 15},
      {25, 30, 35, 40, 45, 5, 10, 15, 20}, {30, 35, 40, 45, 5, 10, 15, 20, 25},
      {35, 40, 45, 5, 10, 15, 20, 25, 30}, {40, 45, 5, 10, 15, 20, 25, 30, 35}};
  Matrix m = MultiplyNumber(m1, d);
  EXPECT_TRUE(IsEqualMatrices(m, m2));
}

TEST(MatrixOperations, OperatorMulNumber) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  double d = 5;
  Matrix m2 = {
      {5, 10, 15, 20, 25, 30, 35, 40, 45}, {10, 15, 20, 25, 30, 35, 40, 45, 5},
      {15, 20, 25, 30, 35, 40, 45, 5, 10}, {20, 25, 30, 35, 40, 45, 5, 10, 15},
      {25, 30, 35, 40, 45, 5, 10, 15, 20}, {30, 35, 40, 45, 5, 10, 15, 20, 25},
      {35, 40, 45, 5, 10, 15, 20, 25, 30}, {40, 45, 5, 10, 15, 20, 25, 30, 35}};
  Matrix m = m1 * d;
  EXPECT_TRUE(IsEqualMatrices(m, m2));
}

TEST(MatrixOperations, OperatorMinusEqual) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{9, 8, 7, 6, 5, 4, 3, 2, 1}, {8, 7, 6, 5, 4, 3, 2, 1, 9},
               {7, 6, 5, 4, 3, 2, 1, 9, 8}, {6, 5, 4, 3, 2, 1, 9, 8, 7},
               {5, 4, 3, 2, 1, 9, 8, 7, 6}, {4, 3, 2, 1, 9, 8, 7, 6, 5},
               {3, 2, 1, 9, 8, 7, 6, 5, 4}, {2, 1, 9, 8, 7, 6, 5, 4, 3}};
  Matrix m3 = {
      {-8, -6, -4, -2, 0, 2, 4, 6, 8}, {-6, -4, -2, 0, 2, 4, 6, 8, -8},
      {-4, -2, 0, 2, 4, 6, 8, -8, -6}, {-2, 0, 2, 4, 6, 8, -8, -6, -4},
      {0, 2, 4, 6, 8, -8, -6, -4, -2}, {2, 4, 6, 8, -8, -6, -4, -2, 0},
      {4, 6, 8, -8, -6, -4, -2, 0, 2}, {6, 8, -8, -6, -4, -2, 0, 2, 4}};
  m1 -= m2;
  EXPECT_TRUE(IsEqualMatrices(m1, m3));
}

TEST(MatrixOperations, MultiplyHadamard) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{9, 8, 7, 6, 5, 4, 3, 2, 1}, {8, 7, 6, 5, 4, 3, 2, 1, 9},
               {7, 6, 5, 4, 3, 2, 1, 9, 8}, {6, 5, 4, 3, 2, 1, 9, 8, 7},
               {5, 4, 3, 2, 1, 9, 8, 7, 6}, {4, 3, 2, 1, 9, 8, 7, 6, 5},
               {3, 2, 1, 9, 8, 7, 6, 5, 4}, {2, 1, 9, 8, 7, 6, 5, 4, 3}};
  Matrix m3 = {
      {9, 16, 21, 24, 25, 24, 21, 16, 9}, {16, 21, 24, 25, 24, 21, 16, 9, 9},
      {21, 24, 25, 24, 21, 16, 9, 9, 16}, {24, 25, 24, 21, 16, 9, 9, 16, 21},
      {25, 24, 21, 16, 9, 9, 16, 21, 24}, {24, 21, 16, 9, 9, 16, 21, 24, 25},
      {21, 16, 9, 9, 16, 21, 24, 25, 24}, {16, 9, 9, 16, 21, 24, 25, 24, 21}};
  Matrix m = MultiplyHadamard(m1, m2);
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, MultiplyWinograd1) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7},
               {2, 3, 4, 5, 6, 7, 8},
               {3, 4, 5, 6, 7, 8, 9},
               {4, 5, 6, 7, 8, 9, 1},
               {5, 6, 7, 8, 9, 1, 2}};
  Matrix m2 = {{1, 2, 3, 4, 5}, {2, 3, 4, 5, 6}, {3, 4, 5, 6, 7},
               {4, 5, 6, 7, 8}, {5, 6, 7, 8, 9}, {6, 7, 8, 9, 1},
               {7, 8, 9, 1, 2}};
  Matrix m3 = {{140, 168, 196, 161, 135},
               {168, 203, 238, 201, 173},
               {196, 238, 280, 241, 211},
               {161, 201, 241, 272, 231},
               {135, 173, 211, 231, 260}};
  Matrix m = MultiplyWinograd(m1, m2);
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, MultiplyWinograd2) {
  Matrix m1 = {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}};
  Matrix m2 = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}};
  Matrix m3 = {{2, 4, 6, 8, 10},
               {4, 8, 12, 16, 20},
               {6, 12, 18, 24, 30},
               {8, 16, 24, 32, 40},
               {10, 20, 30, 40, 50}};
  Matrix m = MultiplyWinograd(m1, m2);
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, MultiplyWinograd3) {
  Matrix m1 = {{1, 2, 3, 4, 5}};
  Matrix m2 = {{1}, {2}, {3}, {4}, {5}};
  Matrix m3 = {{55}};
  Matrix m = MultiplyWinograd(m1, m2);
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, Multiply) {
  Matrix m1 = {{1}, {2}, {3}, {4}, {5}};
  Matrix m2 = {{1, 2, 3, 4, 5}};
  Matrix m3 = {{1, 2, 3, 4, 5},
               {2, 4, 6, 8, 10},
               {3, 6, 9, 12, 15},
               {4, 8, 12, 16, 20},
               {5, 10, 15, 20, 25}};
  Matrix m = Multiply(m1, m2);
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, OperatorMul) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7},
               {2, 3, 4, 5, 6, 7, 8},
               {3, 4, 5, 6, 7, 8, 9},
               {4, 5, 6, 7, 8, 9, 1},
               {5, 6, 7, 8, 9, 1, 2}};
  Matrix m2 = {{1, 2, 3, 4, 5}, {2, 3, 4, 5, 6}, {3, 4, 5, 6, 7},
               {4, 5, 6, 7, 8}, {5, 6, 7, 8, 9}, {6, 7, 8, 9, 1},
               {7, 8, 9, 1, 2}};
  Matrix m3 = {{140, 168, 196, 161, 135},
               {168, 203, 238, 201, 173},
               {196, 238, 280, 241, 211},
               {161, 201, 241, 272, 231},
               {135, 173, 211, 231, 260}};
  Matrix m = m1 * m2;
  EXPECT_TRUE(IsEqualMatrices(m, m3));
}

TEST(MatrixOperations, Activate) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{0.731059, 0.880797, 0.952574, 0.982014, 0.993307, 0.997527,
                0.999089, 0.999665, 0.999877},
               {0.880797, 0.952574, 0.982014, 0.993307, 0.997527, 0.999089,
                0.999665, 0.999877, 0.731059},
               {0.952574, 0.982014, 0.993307, 0.997527, 0.999089, 0.999665,
                0.999877, 0.731059, 0.880797},
               {0.982014, 0.993307, 0.997527, 0.999089, 0.999665, 0.999877,
                0.731059, 0.880797, 0.952574},
               {0.993307, 0.997527, 0.999089, 0.999665, 0.999877, 0.731059,
                0.880797, 0.952574, 0.982014},
               {0.997527, 0.999089, 0.999665, 0.999877, 0.731059, 0.880797,
                0.952574, 0.982014, 0.993307},
               {0.999089, 0.999665, 0.999877, 0.731059, 0.880797, 0.952574,
                0.982014, 0.993307, 0.997527},
               {0.999665, 0.999877, 0.731059, 0.880797, 0.952574, 0.982014,
                0.993307, 0.997527, 0.999089}};
  Matrix m = Activate(m1, sigmoid);
  EXPECT_TRUE(IsEqualMatrices(m, m2));
}

TEST(MatrixOperations, ActivateDerivative) {
  Matrix m1 = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9, 1},
               {3, 4, 5, 6, 7, 8, 9, 1, 2}, {4, 5, 6, 7, 8, 9, 1, 2, 3},
               {5, 6, 7, 8, 9, 1, 2, 3, 4}, {6, 7, 8, 9, 1, 2, 3, 4, 5},
               {7, 8, 9, 1, 2, 3, 4, 5, 6}, {8, 9, 1, 2, 3, 4, 5, 6, 7}};
  Matrix m2 = {{0, -2, -6, -12, -20, -30, -42, -56, -72},
               {-2, -6, -12, -20, -30, -42, -56, -72, 0},
               {-6, -12, -20, -30, -42, -56, -72, 0, -2},
               {-12, -20, -30, -42, -56, -72, 0, -2, -6},
               {-20, -30, -42, -56, -72, 0, -2, -6, -12},
               {-30, -42, -56, -72, 0, -2, -6, -12, -20},
               {-42, -56, -72, 0, -2, -6, -12, -20, -30},
               {-56, -72, 0, -2, -6, -12, -20, -30, -42}};
  Matrix m = ActivateDerivative(m1, sigmoid_derivative);
  EXPECT_TRUE(IsEqualMatrices(m, m2));
}

TEST(MatrixOperations, Exceptions) {
  Matrix m1;
  Matrix m2{{1, 2, 3}, {4, 5, 6}};
  Vector v;
  EXPECT_THROW(m1 + m2, std::logic_error);
  EXPECT_THROW(Multiplication(m1, m2), std::logic_error);
  EXPECT_THROW(MultiplyNumber(m1, 1.0), std::logic_error);
  EXPECT_THROW(Transpose(m1), std::logic_error);
  EXPECT_THROW(Activate(m1, sigmoid), std::logic_error);
  EXPECT_THROW(ActivateDerivative(m1, sigmoid_derivative), std::logic_error);
  EXPECT_THROW(MultiplyWinograd(m1, m2), std::logic_error);
  EXPECT_THROW(Multiply(m1, m2), std::logic_error);
  PrintVector(v);
  PrintMatrix(m1);
  RandomizeVector(v);
}
